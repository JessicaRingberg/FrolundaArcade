@using FrölundaArcade.Client.Helpers
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Authorization
@inject HttpClient _http
@inject NavigationManager _navigationManager



@*
<style>
    .btn:focus {
        background-color: #ff6e40;
    }
</style>*@


@if (!_purchaseConfirmed)
{
    <br/>
    <MudGrid Justify="Justify.Center" >
        @if(!_isLoggedIn)
        {
          <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator/>
            <MudGrid  Justify="Justify.Center">
                <MudItem>
                    <MudCard>
                        <MudCardContent>
                            <MudTextField Label="Email"
                                                @bind-Value="model.Email" For="@(() => model.Email)" />
                            <MudTextField Label="Telefon nummer" Class="mt-3"
                                                @bind-Value="model.PhoneNumber" For="@(() => model.PhoneNumber)" />
                            <MudTextField Label="Stad" Class="mt-3"
                                                @bind-Value="model.Address.City" For="@(() => model.Address.City)" />
                            <MudTextField Label="Gata" Class="mt-3"
                                                @bind-Value="model.Address.Street" For="@(() => model.Address.Street)" />
                            <MudTextField Label="Post nummer" Class="mt-3"
                                                @bind-Value="model.Address.Zipcode" For="@(() => model.Address.Zipcode)" />
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Fortsätt beställningen</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </EditForm>
        }  
    </MudGrid>

    <br/>
    <br/>

    <MudGrid Justify="Justify.Center">
        <MudItem>
            <MudCard Style="width: 50vw;" Class="pa-8">
                <MudCardContent>
                    <MudGrid Justify="Justify.Center">
                        <MudText Align="Align.Center" Typo="Typo.h5"><b>Välj betalningsmetod:</b></MudText>
                    </MudGrid>
                    <br/>
                    <br/>
                    <MudGrid Justify="Justify.Center">
                        <MudText Align="Align.Center" Typo="Typo.subtitle2">Vald betalningsmetod: <b>@_paymentType</b></MudText>
                    </MudGrid>
                </MudCardContent>
                <br/>
                <br/>
                <MudGrid Justify="Justify.Center">
                    <MudCardActions>
                        <MudButton Class="btn" OnClick="PaymentMethod1" Size="Size.Large" Variant="Variant.Filled" Color="Color.Primary" Disabled="@_guestInfoConfirmed" FullWidth="true"> Kort </MudButton>
                    </MudCardActions>
                    <MudCardActions>
                        <MudButton Class="btn" OnClick="PaymentMethod2" Size="Size.Large" Variant="Variant.Filled" Color="Color.Primary" Disabled="@_guestInfoConfirmed" FullWidth="true"> Swish </MudButton>
                    </MudCardActions>
                    <MudCardActions>
                        <MudButton Class="btn" OnClick="PaymentMethod3" Size="Size.Large" Variant="Variant.Filled" Color="Color.Primary" Disabled="@_guestInfoConfirmed" FullWidth="true"> PayPal </MudButton>
                    </MudCardActions>
                </MudGrid>
                <br/>
            </MudCard>
        </MudItem>
    </MudGrid>
        
    <br/>
    <br/>
    <br/>
    
    <MudGrid Justify="Justify.Center">
        <MudItem>
            <MudCard Style="width: 50vw;" Class="pa-8">
                <MudCardContent>
                    <MudGrid Justify="Justify.Center">
                        <MudText Align="Align.Center" Typo="Typo.h5"><b>Välj leveranssätt:</b></MudText>
                    </MudGrid>
                </MudCardContent>
                <br/>
                <br/>
                @*<MudGrid Justify="Justify.Center">
                    <MudText Align="Align.Center" Typo="Typo.subtitle2">Vald leveransmetod: <b>@_shippingType1; @_shippingType2</b></MudText>
                </MudGrid>
                <br/>
                <br/>*@
                <MudGrid Justify="Justify.Center">
                    <MudCardActions>
                        <MudButton Class="btn" OnClick="CollectInStore" Size="Size.Large" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" Disabled="@_paymentSelected"> Avhämtning i butik </MudButton>
                        <MudMessageBox @ref="mbox1" Title="">
                            <MessageContent><b>Avhämtning i butik : GRATIS</b></MessageContent>
                        </MudMessageBox>
                    </MudCardActions>

                    <MudCardActions>
                        <MudButton Class="btn" OnClick="HomeDelivery" Size="Size.Large" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" Disabled="@_paymentSelected"> Hemleverans </MudButton>
                        <MudMessageBox @ref="mbox2" Title="">
                            <MessageContent><b>Hemleverans via DHL : 49kr</b></MessageContent>
                        </MudMessageBox>
                    </MudCardActions>
                </MudGrid>
                <br/>
            </MudCard>
        </MudItem>
    </MudGrid>

    <br/>
    <br/>
    <br/>

    <MudGrid Justify="Justify.Center">
        <MudCardActions>
            <MudButton OnClick="ConfirmPurchase" Size="Size.Large" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" Disabled="@_shippingSelected"> Slutför köp - totalt: @shipping.TotalPrice kr  </MudButton>
        </MudCardActions>
    </MudGrid>

    <br/>
    <br/>
}

else {<Checkout Games="Games" Costs="shipping"/> }


@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthStateTask { get; set; }

    [Parameter]
    public List<CartGame> Games { get; set; }

    bool _purchaseConfirmed = false;
    bool _paymentSelected = true;
    bool _shippingSelected = true;
    bool _guestInfoConfirmed = true;
    string _paymentType = "";
    string _shippingType = "";
    ShippingCosts shipping = new();

    GuestInfo model = new GuestInfo(){Address = new AddressDetails()};

    public GuestOrder Guest { get; set; } = new();

    bool _isLoggedIn = false;


    MudMessageBox mbox1 { get; set; }
    MudMessageBox mbox2 { get; set; }


    private void PaymentMethod1()
    {
        _paymentSelected = false; 
        _paymentType = "Kort";
    }
    private void PaymentMethod2()
    {
        _paymentSelected = false; 
        _paymentType = "Swish";
    }
    private void PaymentMethod3()
    {
        _paymentSelected = false; 
        _paymentType = "PayPal";
    }

    private async void CollectInStore()
    {
        shipping.TotalPrice = 0;

        foreach(var game in Games)
        {
            shipping.TotalPrice += (game.Quantity * game.Price);
        }

        _shippingSelected = false;
        bool? result = await mbox1.Show();
        @*_shippingType1 = "Avhämtning i butik";*@
        @*StateHasChanged();*@

    }

    private async void HomeDelivery()
    {
        shipping.TotalPrice = 0;

        foreach(var game in Games)
        {
            shipping.TotalPrice += (game.Quantity * game.Price);
        }

        shipping.TotalPrice += shipping.HomeDelivery;
        _shippingSelected = false;
        bool? result = await mbox2.Show();
        @*_shippingType2 = "Hemleverans";*@
        @*StateHasChanged();*@

    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateTask;
        _isLoggedIn = authState.User.Identity?.IsAuthenticated??false;
        if(_isLoggedIn)
        {
            _guestInfoConfirmed = false;
        }
    }

    private async Task ConfirmPurchase()
    {
        if(_isLoggedIn)
        {
            await _http.PostAsync(Constants.Orders, null);
        }
        else
        {
            await _http.PostAsJsonAsync(Constants.GuestOrder(), Guest);
        }
        _purchaseConfirmed = true;
    }

    private async Task OnValidSubmit()
    {
        Guest.Games = Games;
        Guest.Register = model;
        _guestInfoConfirmed = false;
    } 
}
