@page "/accessories-page"
@inject HttpClient _http
@inject NavigationManager _navigationManager
@inject NavigateTo NavigateTo
@inject ISnackbar Snackbar

<PageTitle>Tillbehör</PageTitle>
<MudGrid>
    <MudItem xs="12" sm="3">
        <MudGrid Class="d-block">
            <MudItem>
                <MudTextField @bind-Value="name" Variant="Variant.Outlined" Placeholder="Sök" Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>

            <MudSlider T="int" Value="maxPrice" ValueChanged="MaxPriceChanged" Max="_maxPrice" Step="_priceStep" Color="Color.Primary">Maxpris:
                @maxPrice@currency</MudSlider>
            <MudSlider T="int" Value="minPrice" ValueChanged="MinPriceChanged" Max="_maxPrice - _priceStep" Step="_priceStep"
                       Color="Color.Primary">Minimum pris: @minPrice@currency</MudSlider>

                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => FilterProducts()">Filtrera
                </MudButton>
            </MudItem>
            <MudItem xs="12" sm="12">
                <MudCard>
                    <MudCardContent>
                        Missa inte våra LAN events!
                        <MudLink Href="/event-page">Till Events</MudLink>
                        <MudLink Href="/event-page">
                            <MudCardMedia Image="/Lan.png" style="background-size: contain;"></MudCardMedia>
                        </MudLink>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
    </MudItem>
    <MudItem xs="12" sm="9">
        <MudGrid>
            <MudItem xs="12" sm="9" Class="d-inline">
                <h2>Våra Tillbehör</h2>
                <p>Hos oss hittar ni grymma tillbehör!</p>
                <MudButton Class="my-3" Variant="Variant.Filled" Color="Color.Primary" OnClick="ShowGames">Visa Spel</MudButton>
                <MudButton Class="my-3" Variant="Variant.Filled" Color="Color.Secondary" OnClick="ToHomePage">Visa alla Produkter</MudButton>

            </MudItem>
          
            <GameList Games="Games" _isLoggedIn="_isLoggedIn"/>
        </MudGrid>
    </MudItem>
    <MudScrollToTop TopOffset="100" Style="z-index:2001; bottom:60px; right: 40px;">     
        <div>
            <MudIconButton Variant="Variant.Filled" Color="Color.Warning" Icon="@Icons.Filled.ArrowUpward"/>
        </div>
    </MudScrollToTop>
</MudGrid>

@code
{
    bool _isLoggedIn = false;

    [CascadingParameter]
    public Task<AuthenticationState> AuthStateTask { get; set; }

    private int _maxPrice = 1000;
    private int _priceStep = 50;
    public string name = "";
    public int maxPrice = 1000;
    public int minPrice = 0;
    public double ageLimit = 16;
    private string currency = "kr";

    List<GameForList> Games { get; set; } = new();
    List<Category> Categories { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateTask;
        _isLoggedIn = authState.User.Identity?.IsAuthenticated??false;

        var filters = new Dictionary<string, string>
        {
            {nameof(GameFilters.Category), Constants.Tillbehör },
            {nameof(GameFilters.OnlyInStock), false.ToString()}
        };

        Games = await _http.GetFromJsonAsync<List<GameForList>>(QueryHelpers.AddQueryString(Constants.Games, filters));
        Games = Games.FindAll(g => g.Category == Constants.Tillbehör);

        Categories = await _http.GetFromJsonAsync<List<Category>>(Constants.Categories);
    }

    private void MinPriceChanged(int price) => minPrice = price >= maxPrice ? maxPrice - _priceStep : price;

    private void MaxPriceChanged(int price) => maxPrice = price <= minPrice ? minPrice + _priceStep : price;

    private async Task FilterProducts()
    {

        var query = new Dictionary<string, string>()
        {
            [nameof(GameFilters.Name)] = name,
            [nameof(GameFilters.Category)] = Constants.Tillbehör,
            [nameof(GameFilters.MinPrice)] = minPrice.ToString(),
            [nameof(GameFilters.MaxPrice)] = maxPrice.ToString(),
            [nameof(GameFilters.OnlyInStock)] = false.ToString()
        };

        var uri = QueryHelpers.AddQueryString(Constants.Games, query);
        Games = await _http.GetFromJsonAsync<List<GameForList>>(uri);
    }

    private async Task ShowGames()
    {
        _navigationManager.NavigateTo("/game-page");
    }

    private async Task ToHomePage()
    {
        _navigationManager.NavigateTo("/");
    }
}